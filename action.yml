
name: UsePiecemeal
description: Add extensibility to any PowerShell module with Piecemeal
inputs: 
  PiecemealScript: 
    required: false
    description: |
      A PowerShell Script that uses Piecemeal.  
      Any files outputted from the script will be added to the repository.
      If those files have a .Message attached to them, they will be committed with that message.
  SkipPiecemealPS1: 
    required: false
    description: 'If set, will not process any files named *.Piecemeal.ps1'
  ModuleName: 
    required: false
    description: |
      The name of the module for which types and formats are being generated.
      If not provided, this will be assumed to be the name of the root directory.
  CommitMessage: 
    required: false
    description: |
      If provided, will commit any remaining changes made to the workspace with this commit message.
      If no commit message is provided, changes will not be committed.
  UserEmail: 
    required: false
    description: The user email associated with a git commit.
  UserName: 
    required: false
    description: The user name associated with a git commit.
branding: 
  icon: terminal
  color: blue
outputs: 
  
    PiecemealScriptRuntime: 
      description: The time it took the .PiecemealScript parameter to run
      value: ${{steps.PiecemealAction.outputs.PiecemealScriptRuntime}}
    PiecemealPS1Runtime: 
      description: The time it took all .Piecemeal.ps1 files to run
      value: ${{steps.PiecemealAction.outputs.PiecemealPS1Runtime}}
    PiecemealPS1Files: 
      description: The .Piecemeal.ps1 files that were run (separated by semicolons)
      value: ${{steps.PiecemealAction.outputs.PiecemealPS1Files}}
    PiecemealPS1Count: 
      description: The number of .Piecemeal.ps1 files that were run
      value: ${{steps.PiecemealAction.outputs.PiecemealPS1Count}}
runs: 
  using: composite
  steps: 
    - name: PiecemealAction
      id: PiecemealAction
      shell: pwsh
      env: 
        PiecemealScript: ${{inputs.PiecemealScript}}
        CommitMessage: ${{inputs.CommitMessage}}
        UserEmail: ${{inputs.UserEmail}}
        ModuleName: ${{inputs.ModuleName}}
        SkipPiecemealPS1: ${{inputs.SkipPiecemealPS1}}
        UserName: ${{inputs.UserName}}
      run: |
        $Parameters = @{}
        $Parameters.PiecemealScript = ${env:PiecemealScript}
        $Parameters.SkipPiecemealPS1 = ${env:SkipPiecemealPS1}
        $Parameters.SkipPiecemealPS1 = $parameters.SkipPiecemealPS1 -match 'true';
        $Parameters.ModuleName = ${env:ModuleName}
        $Parameters.CommitMessage = ${env:CommitMessage}
        $Parameters.UserEmail = ${env:UserEmail}
        $Parameters.UserName = ${env:UserName}
        foreach ($k in @($parameters.Keys)) {
            if ([String]::IsNullOrEmpty($parameters[$k])) {
                $parameters.Remove($k)
            }
        }
        Write-Host "::debug:: PiecemealAction $(@(foreach ($p in $Parameters.GetEnumerator()) {'-' + $p.Key + ' ' + $p.Value}) -join ' ')"
        & {<#
        .Synopsis
            GitHub Action for Piecemeal
        .Description
            GitHub Action for Piecemeal.  This will:
        
            * Import Piecemeal
            * Run all *.Piecemeal.ps1 files beneath the workflow directory
            * Run a .PiecemealScript parameter
        
            Any files changed can be outputted by the script, and those changes can be checked back into the repo.
            Make sure to use the "persistCredentials" option with checkout.
        #>
        
        param(
        # A PowerShell Script that uses Piecemeal.  
        # Any files outputted from the script will be added to the repository.
        # If those files have a .Message attached to them, they will be committed with that message.
        [string]
        $PiecemealScript,
        
        # If set, will not process any files named *.Piecemeal.ps1
        [switch]
        $SkipPiecemealPS1,
        
        # The name of the module for which types and formats are being generated.
        # If not provided, this will be assumed to be the name of the root directory.
        [string]
        $ModuleName,
        
        # If provided, will commit any remaining changes made to the workspace with this commit message.
        # If no commit message is provided, changes will not be committed.
        [string]
        $CommitMessage,
        
        # The user email associated with a git commit.
        [string]
        $UserEmail,
        
        # The user name associated with a git commit.
        [string]
        $UserName
        )
        
        "::group::Parameters" | Out-Host
        [PSCustomObject]$PSBoundParameters | Format-List | Out-Host
        "::endgroup::" | Out-Host
        
        
        $gitHubEvent = if ($env:GITHUB_EVENT_PATH) {
            [IO.File]::ReadAllText($env:GITHUB_EVENT_PATH) | ConvertFrom-Json
        } else { $null }
        
        @"
        ::group::GitHubEvent
        $($gitHubEvent | ConvertTo-Json -Depth 100)
        ::endgroup::
        "@ | Out-Host
        
        $branchName = git rev-parse --abrev-ref HEAD
        if (-not $branchName) { 
            return
        }
        
        if ($env:GITHUB_ACTION_PATH) {
            $PiecemealModulePath = Join-Path $env:GITHUB_ACTION_PATH 'Piecemeal.psd1'
            if (Test-path $PiecemealModulePath) {
                Import-Module $PiecemealModulePath -Force -PassThru | Out-String
            } else {
                throw "Piecemeal not found"
            }
        } elseif (-not (Get-Module Piecemeal)) {    
            throw "Action Path not found"
        }
        
        "::notice title=ModuleLoaded::Piecemeal Loaded from Path - $($PiecemealModulePath)" | Out-Host
        
        $anyFilesChanged = $false
        $processScriptOutput = { process { 
            $out = $_
            $outItem = Get-Item -Path $out -ErrorAction SilentlyContinue
            $fullName, $shouldCommit = 
                if ($out -is [IO.FileInfo]) {
                    $out.FullName, (git status $out.Fullname -s)
                } elseif ($outItem) {
                    $outItem.FullName, (git status $outItem.Fullname -s)
                }
            if ($shouldCommit) {
                git add $fullName
                if ($out.Message) {
                    git commit -m "$($out.Message)"
                } elseif ($out.CommitMessage) {
                    git commit -m "$($out.CommitMessage)"
                }  elseif ($gitHubEvent.head_commit.message) {
                    git commit -m "$($gitHubEvent.head_commit.message)"
                }  
                $anyFilesChanged = $true
            }
            $out
        } }
        
        
        if (-not $UserName) { $UserName = $env:GITHUB_ACTOR }
        if (-not $UserEmail) { $UserEmail = "$UserName@github.com" }
        git config --global user.email $UserEmail
        git config --global user.name  $UserName
        
        if (-not $env:GITHUB_WORKSPACE) { throw "No GitHub workspace" }
        
        git pull | Out-Host
        
        $PiecemealScriptStart = [DateTime]::Now
        if ($PiecemealScript) {
            Invoke-Expression -Command $PiecemealScript |
                . $processScriptOutput |
                Out-Host
        }
        $PiecemealScriptTook = [Datetime]::Now - $PiecemealScriptStart
        "::set-output name=PiecemealScriptRuntime::$($PiecemealScriptTook.TotalMilliseconds)"   | Out-Host
        
        $PiecemealPS1Start = [DateTime]::Now
        $PiecemealPS1List  = @()
        if (-not $SkipPiecemealPS1) {
            $PiecemealFiles = @(
            Get-ChildItem -Recurse -Path $env:GITHUB_WORKSPACE |
                Where-Object Name -Match '\.Piecemeal\.ps1$')
                
            if ($PiecemealFiles) {
                $PiecemealFiles|        
                ForEach-Object {
                    $PiecemealPS1List += $_.FullName.Replace($env:GITHUB_WORKSPACE, '').TrimStart('/')
                    $PiecemealPS1Count++
                    "::notice title=Running::$($_.Fullname)" | Out-Host
                    . $_.FullName |            
                        . $processScriptOutput  | 
                        Out-Host
                }
            }
        }
        
        $PiecemealPS1EndStart = [DateTime]::Now
        $PiecemealPS1Took = [Datetime]::Now - $PiecemealPS1Start
        "::set-output name=PiecemealPS1Count::$($PiecemealPS1List.Length)"   | Out-Host
        "::set-output name=PiecemealPS1Files::$($PiecemealPS1List -join ';')"   | Out-Host
        "::set-output name=PiecemealPS1Runtime::$($PiecemealPS1Took.TotalMilliseconds)"   | Out-Host
        if ($CommitMessage -or $anyFilesChanged) {
            if ($CommitMessage) {
                dir $env:GITHUB_WORKSPACE -Recurse |
                    ForEach-Object {
                        $gitStatusOutput = git status $_.Fullname -s
                        if ($gitStatusOutput) {
                            git add $_.Fullname
                        }
                    }
        
                git commit -m $ExecutionContext.SessionState.InvokeCommand.ExpandString($CommitMessage)
            }    
        
            $checkDetached = git symbolic-ref -q HEAD
            if (-not $LASTEXITCODE) {
                "::notice::Pushing Changes" | Out-Host
                git push        
                "Git Push Output: $($gitPushed  | Out-String)"
            } else {
                "::notice::Not pushing changes (on detached head)" | Out-Host
                $LASTEXITCODE = 0
                exit 0
            }
        }
        } @Parameters

